#include <bits/stdc++.h>

using namespace std;

class Nod
{
public:
    int data;
    Nod* next= new Nod;

    Nod() : data(0), next(NULL)
    {};
    Nod(int data, Nod* next);

    Nod* operator=(Nod* newNode);

    ~Nod()
    {
        data = 0;
        next = NULL;
    }
};

Nod* Nod::operator=(Nod* newNode)
{
    newNode-> data = this-> data;
    newNode-> next = this-> next;
    return newNode;
}

class Nod_Dublu : public Nod
{
public:
    Nod* prev= new Nod;

    Nod_Dublu() :Nod(), prev(NULL)
    {};
    Nod_Dublu(int data, Nod* next, Nod* prev);

    Nod_Dublu* operator=(Nod_Dublu* newNode);

    ~Nod_Dublu()
    {
        data = 0;
        next = NULL;
        prev = NULL;
    }
};

Nod_Dublu* Nod_Dublu::operator=(Nod_Dublu* newNode)
{
    newNode-> data = this-> data;
    newNode-> next = this-> next;
    newNode-> prev = this-> prev;
    return newNode;
}

class LDI
{
protected:
    Nod_Dublu* head =new Nod_Dublu;
    Nod_Dublu* curr =new Nod_Dublu;
    Nod_Dublu* temp =new Nod_Dublu;

public:
    LDI(): head(NULL), curr(NULL), temp(NULL)
    {};
    LDI(Nod_Dublu* head, Nod_Dublu* curr, Nod_Dublu* temp);
    void InsertAtHead(int addData);
    void InsertAtEnd(int addData);
    void DeleteNodeLDI(int delData);
    void Print();
    void ReversePrint();
    void SortedInsert(Nod_Dublu** head, Nod_Dublu* newNode);
    void InsertionSort();

    friend ostream& operator<<(ostream& out, const LDI* L);
    friend istream& operator>>(istream& in, LDI* L);
    LDI* operator=(LDI* L);

    ~LDI()
    {
        head = NULL;
        curr = NULL;
        temp = NULL;
    }

};

LDI* LDI::operator=(LDI* L)
{
    curr = head;
    while(curr!= NULL)
    {
        L->InsertAtEnd(curr-> data);
        curr = (Nod_Dublu*)curr-> next;
    }
    L-> head = this-> head;
    return L;
}

void LDI::InsertAtHead(int addData)
{
    Nod_Dublu* newNode= new Nod_Dublu;
    newNode-> data = addData;
    newNode-> prev = NULL;
    newNode-> next = NULL;

    if(head == NULL)
    {
        head = newNode;
        return;
    }
    else
    {
        head->prev = newNode;
        newNode->next = head;
        head = newNode;
    }
}

void LDI::InsertAtEnd(int addData)
{
    Nod_Dublu* newNode= new Nod_Dublu;
    newNode->data = addData;
    newNode->prev = NULL;
    newNode->next = NULL;

    if(head!=NULL)
    {
        temp = head;
        while(temp->next!=NULL)
            temp = (Nod_Dublu*)temp->next;
        temp->next = newNode;
        newNode-> prev = temp;

    }
    else
        head = newNode;
}

void LDI::DeleteNodeLDI(int delData)
{
    Nod_Dublu* delPtr = NULL;
    temp = head;
    curr = head;

    if(head->data==delData)
    {
        cout<<"Valoarea "<<head->data <<" a fost stearsa\n";
        temp = NULL;
        head = (Nod_Dublu*)head->next;
        head->prev = NULL;

    }
    else
    {
        while(curr!=NULL && curr->data != delData)
        {
            temp = curr;
            curr = (Nod_Dublu*)curr->next;
        }
        if(curr == NULL)
        {
            cout<<"Valoarea "<<delData<<" nu este in lista\n";
            delete delPtr;
        }

        else
        {
            delPtr = curr;
            if(curr->next!=NULL)
            {
                curr = (Nod_Dublu*)curr->next;
                curr->prev = temp;
                temp->next = curr;
            }
            else
            {
                temp->next = NULL;
                curr = NULL;
            }
            delete delPtr;
            cout<<"Valoarea "<< delData<<" a fost stearsa\n";
        }
    }
}

void LDI::Print()
{
    temp = head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp= (Nod_Dublu*)temp-> next;
    }
}

void LDI::ReversePrint()
{
    temp = head;
    if(temp == NULL)
        return;
    while(temp->next!=NULL)
        temp = (Nod_Dublu*)temp-> next;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp = (Nod_Dublu*)temp-> prev;
    }
}

void LDI::SortedInsert( Nod_Dublu** head, Nod_Dublu* newNode)
{
    Nod_Dublu* aux;

    if(*head==NULL)
        *head= newNode;

    /// verificam daca nodul se poate insera la inceputul listei
    else if((*head)->data >= newNode->data)
    {
        newNode-> next= *head;
        aux = (Nod_Dublu*)newNode-> next;
        aux -> prev= newNode;
        *head= newNode;
    }
    else
    {
        curr = *head;

        /// cautam nodul dupa care va trebui sa inseram newNode
        while(curr-> next!= NULL && curr-> next-> data < newNode-> data)
            curr= (Nod_Dublu*)curr->next;

        newNode->next = curr->next;

        /// verificam daca newNode este inserat la urma listei
        if(curr-> next != NULL)
        {
            aux = (Nod_Dublu*)newNode-> next;
            aux -> prev= newNode;
        }


        curr-> next= newNode;
        newNode-> prev= curr;
    }
}

void LDI::InsertionSort()
{
    Nod_Dublu* sorted = NULL;

    /// parcurgem lista si inseram fiecare nod in sorted
    curr= head;
    while(curr!= NULL)
    {

        /// urm va reprezenta nodul de dupa elementul curr
        Nod_Dublu* urm = (Nod_Dublu*)curr->next;

        /// nodul curr va fi nodul unde se va insera noul nod
        curr->prev = curr->next = NULL;

        /// inseram nodul curr in lista sorted
        SortedInsert(&sorted, curr);

        /// actualizam nodul curent
        curr = urm;
    }

    /// actualizam nodul head
    head = sorted;
}

///---------------------------------------------------------------------------------------------------------------

class LSI: public LDI
{
protected:
    Nod* head= new Nod;
    Nod* curr= new Nod;
    Nod* temp= new Nod;
public:
    LSI() : head(NULL), curr(NULL), temp(NULL)
    {};
    LSI(Nod* head, Nod* curr, Nod* temp);
    void InsertNode(int addData);
    void DeleteNodeLSI(int delData);
    void PrintLSI();

    friend ostream& operator<<(ostream& out, const LSI* L);
    friend istream& operator>>(istream& in, LSI* L);
    LSI* operator=(LSI* L);

    ~LSI()
    {
        head = NULL;
        curr = NULL;
        temp = NULL;
    }
};

LSI* LSI::operator=(LSI* L)
{
    curr = head;
    while(curr!= NULL)
    {
        L->InsertNode(curr-> data);
        curr = curr-> next;
    }
    L->head = this->head;
    return L;
}

void LSI::InsertNode(int addData)
{
    Nod* newNode= new Nod;
    newNode->next = NULL;
    newNode->data = addData;

    if(head!=NULL)
    {
        curr = head;
        while(curr->next!=NULL)
            curr = curr->next;
        curr->next = newNode;
    }
    else
        head = newNode;
}

void LSI::DeleteNodeLSI(int delData)
{
    Nod* delPtr = NULL;
    temp = head;
    curr = head;
    while(curr!=NULL && curr->data != delData)
    {
        temp = curr;
        curr = curr->next;
    }
    if(curr == NULL)
    {
        cout<<"Valoarea "<<delData<<" nu este in lista\n";
        delete delPtr;
    }

    else
    {
        delPtr = curr;
        curr = curr->next;
        temp->next = curr;
        if(delPtr == head)
        {
            head = head->next;
            temp = NULL;
        }
        delete delPtr;
        cout<<"Valoarea "<< delData<<" a fost stearsa\n";
    }
}

void LSI::PrintLSI()
{
    temp = head;
    while(temp!=NULL)
    {
        cout<<temp-> data<<" ";
        temp = temp-> next;
    }
}

void OptiuniLDI()
{
    cout<<"\nTastati 1 pentru a adauga un element la inceputul listei;";
    cout<<"\nTastati 2 pentru a adauga un element la sfarsitul listei;";
    cout<<"\nTastati 3 pentru a sterge un element din lista;";
    cout<<"\nTastati 4 pentru a sorta lista";
    cout<<"\nTastati 5 pentru a afisa lista in ordine normala;";
    cout<<"\nTastati 6 pentru a afisa lista in ordine inversa.";
}

void OptiuniLSI()
{
    cout<<"\nTastati 1 pentru a adauga un element in lista;";
    cout<<"\nTastati 2 pentru a sterge un element din lista;";
    cout<<"\nTastati 3 pentru a afisa lista;";
}

int main()
{

    int option, x;
    cout<<"Apasa 1 pentru a lucra cu o LSI;\nApasa 2 pentru a lucra cu o LDI;\n";
    cin>>x;
    if(x==1)
    {
        LSI* L = new LSI;
        do
        {
            OptiuniLSI();
            cout<<"\n\nIntroduceti optiunea: ";
            cin>>option;
            switch(option)
            {
            case 1:
            {
                cout<<"\nCe valoare doriti sa inserati in lista: ";
                cin>>x;
                L->InsertNode(x);
                break;
            }
            case 2:
            {
                cout<<"\nCe valoare doriti sa stergeti din lista: ";
                cin>>x;
                cout<<"\n";
                L->DeleteNodeLSI(x);
                break;
            }
            case 3:
            {
                cout<<"\nLista va fi afisata\n\n";
                L->PrintLSI();
                cout<<"\n";
                break;
            }
            }
        }
        while(option == 1 || option == 2 || option == 3);
    }
    else
    {
        LDI* L = new LDI;
        do
        {
            OptiuniLDI();
            cout<<"\n\nIntroduceti optiunea: ";
            cin>>option;
            switch (option)
            {
            case 1:
            {
                cout<<"\nCe valoare doriti sa inserati la inceput: ";
                cin>>x;
                L->InsertAtHead(x);
                break;
            }
            case 2:
            {
                cout<<"\nCe valoare doriti sa inserati la sfarsit: ";
                cin>>x;
                L->InsertAtEnd(x);
                break;
            }
            case 3:
            {
                cout<<"\nCe valoare doriti sa stergeti: ";
                cin>>x;
                L->DeleteNodeLDI(x);
                cout<<"\n";
                break;
            }
            case 4:
            {
                cout<<"\nLista se va sorta\n";
                L->InsertionSort();
                break;
            }
            case 5:
            {
                cout<<"\nLista va fi afisata in ordine normala: ";
                L->Print();
                cout<<"\n";
                break;
            }
            case 6:
            {
                cout<<"\nLista va fi afisata in ordine inversa: ";
                L->ReversePrint();
                cout<<"\n";
                break;
            }
            }
        }
        while(option==1 || option==2 || option==3 || option==4 || option==5 || option==6);
    }
    cout<<"\nOptiune invalida\n";
    return 0;
}
