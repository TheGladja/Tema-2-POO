#include <bits/stdc++.h>

using namespace std;

class Nod
{
public:
    int data;
    Nod* next= new Nod;

    Nod() : data(0), next(NULL)
    {};
    Nod(int data, Nod* next);
    ~Nod()
    {
        data = 0;
        next = NULL;
    }
};


class Nod_Dublu
{
public:
    int data;
    Nod_Dublu* prev= new Nod_Dublu;
    Nod_Dublu* next= new Nod_Dublu;

    Nod_Dublu() :data(0), next(NULL), prev(NULL)
    {};
    Nod_Dublu(int data, Nod* next, Nod* prev);
    ~Nod_Dublu()
    {
        data = 0;
        next = NULL;
        prev = NULL;
    }
};

class LDI
{
protected:
    Nod_Dublu* head=new Nod_Dublu;
    Nod_Dublu* curr=new Nod_Dublu;
    Nod_Dublu* temp=new Nod_Dublu;

public:
    LDI(): head(NULL), curr(NULL), temp(NULL)
    {};
    LDI(Nod_Dublu* head, Nod_Dublu* curr, Nod_Dublu* temp);
    void InsertAtHead(int addData);
    void InsertAtEnd(int addData);
    void DeleteNodeLDI(int delData);
    void Print();
    void ReversePrint();
    void SortedInsert( Nod_Dublu** head_ref, Nod_Dublu* newNode);
    void InsertionSort();

    friend ostream& operator<<(ostream& out, const LDI* L);
    friend istream& operator>>(istream& in, LDI* L);
    bool operator=(const LDI* L) const;

    ~LDI()
    {
        head = NULL;
        curr = NULL;
        temp = NULL;
    }

};

void LDI::InsertAtHead(int addData)
{
    Nod_Dublu* newNode= new Nod_Dublu;
    newNode-> data = addData;
    newNode-> prev = NULL;
    newNode-> next = NULL;

    if(head == NULL)
    {
        head = newNode;
        return;
    }
    else
        {
            head->prev = newNode;
            newNode->next = head;
            head = newNode;
        }
}

void LDI::InsertAtEnd(int addData)
{
    Nod_Dublu* newNode= new Nod_Dublu;
    newNode->data = addData;
    newNode->prev = NULL;
    newNode->next = NULL;

    if(head!=NULL)
    {
        temp = head;
        while(temp->next!=NULL)
            temp = temp->next;
        temp->next = newNode;
        newNode-> prev = temp;

    }
    else
        head = newNode;
}

void LDI::DeleteNodeLDI(int delData)
{
    Nod_Dublu* delPtr = NULL;
    temp = head;
    curr = head;

    if(head->data==delData)
    {
        cout<<"Valoarea "<<head->data <<" a fost stearsa\n";
        temp = NULL;
        head = head->next;
        head->prev = NULL;

    }
    else
    {
    while(curr!=NULL && curr->data != delData)
    {
        temp = curr;
        curr = curr->next;
    }
    if(curr == NULL)
    {
        cout<<"Valoarea "<<delData<<" nu este in lista\n";
        delete delPtr;
    }

    else
    {
        delPtr = curr;
        if(curr->next!=NULL)
        {
            curr = curr->next;
            curr->prev = temp;
            temp->next = curr;
        }
        else
        {
            temp->next = NULL;
            curr = NULL;
        }
        delete delPtr;
        cout<<"Valoarea "<< delData<<" a fost stearsa\n";
    }
}
}

void LDI::Print()
{
    temp = head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp= temp-> next;
    }
}

void LDI::ReversePrint()
{
    temp = head;
    if(temp == NULL)
        return;
    while(temp->next!=NULL)
        temp = temp-> next;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp = temp-> prev;
    }
}

void LDI::SortedInsert( Nod_Dublu** head, Nod_Dublu* newNode)
{
    // if list is empty
    if (*head == NULL)
        *head = newNode;

    // if the node is to be inserted at the beginning
    // of the doubly linked list
    else if ((*head)->data >= newNode->data)
    {
        newNode->next = *head;
        newNode->next->prev = newNode;
        *head = newNode;
    }

    else
    {
        curr = *head;

        // locate the node after which the new node
        // is to be inserted
        while (curr->next != NULL && curr->next->data < newNode->data)
            curr = curr->next;

        /*Make the appropriate links */

        newNode->next = curr->next;

        // if the new node is not inserted
        // at the end of the list
        if (curr->next != NULL)
            newNode->next->prev = newNode;

        curr->next = newNode;
        newNode->prev = curr;
    }
}

void LDI::InsertionSort()
{
    // Initialize 'sorted' - a sorted doubly linked list
    Nod_Dublu* sorted = NULL;

    // Traverse the given doubly linked list and
    // insert every node to 'sorted'
    curr = head;
    while (curr != NULL) {

        // Store next for next iteration
        Nod_Dublu* urm = curr->next;

        // removing all the links so as to create 'current'
        // as a new node for insertion
        curr->prev = curr->next = NULL;

        // insert current in 'sorted' doubly linked list
        SortedInsert(&sorted, curr);

        // Update current
        curr = urm;
    }

    // Update head_ref to point to sorted doubly linked list
    head = sorted;
}

///---------------------------------------------------------------------------------------------------------------

class LSI : public LDI
{
protected:
    Nod* head= new Nod;
    Nod* curr= new Nod;
    Nod* temp= new Nod;
public:
    LSI() : LDI()
    {};
    LSI(Nod* head, Nod* curr, Nod* temp);
    void InsertNode(int addData);
    void DeleteNodeLSI(int delData);

    friend ostream& operator<<(ostream& out, const LSI* L);
    friend istream& operator>>(istream& in, LSI* L);
    bool operator=(const LSI* L) const;

    ~LSI()
    {
        head = NULL;
        curr = NULL;
        temp = NULL;
    }
};

void LSI::InsertNode(int addData)
{
    Nod* n= new Nod;
    n->next = NULL;
    n->data = addData;

    if(head!=NULL)
    {
        curr = head;
        while(curr->next!=NULL)
            curr = curr->next;
        curr->next = n;
    }
    else
        head = n;
}

void LSI::DeleteNodeLSI(int delData)
{
    Nod* delPtr = NULL;
    temp = head;
    curr = head;
    while(curr!=NULL && curr->data != delData)
    {
        temp = curr;
        curr = curr->next;
    }
    if(curr == NULL)
    {
        cout<<"Valoarea "<<delData<<" nu este in lista\n";
        delete delPtr;
    }

    else
    {
        delPtr = curr;
        curr = curr->next;
        temp->next = curr;
        if(delPtr == head)
            {
                head = head->next;
                temp = NULL;
            }
        delete delPtr;
        cout<<"Valoarea "<< delData<<" a fost stearsa\n";
    }
}

void Optiuni()
{
    cout<<"\nTastati 1 pentru a adauga un element la inceputul listei;";
    cout<<"\nTastati 2 pentru a adauga un element la sfarsitul listei;";
    cout<<"\nTastati 3 pentru a sterge un element din lista;";
    cout<<"\nTastati 4 pentru a sorta lista";
    cout<<"\nTastati 5 pentru a afisa lista in ordine normala;";
    cout<<"\nTastati 6 pentru a afisa lista in ordine inversa.";
}

int main()
{

    LDI* L = new LDI;
    int option, x;
    do
    {
        Optiuni();
        cout<<"\n\nIntroduceti optiunea: ";
        cin>>option;
        switch (option)
        {
        case 1:
            {
                cout<<"\nCe valoare doriti sa inserati la inceput: ";
                cin>>x;
                L->InsertAtHead(x);
                break;
            }
        case 2:
            {
                cout<<"\nCe valoare doriti sa inserati la sfarsit: ";
                cin>>x;
                L->InsertAtEnd(x);
                break;
            }
        case 3:
            {
                cout<<"\nCe valoare doriti sa stergeti: ";
                cin>>x;
                L->DeleteNodeLDI(x);
                cout<<"\n";
                break;
            }
        case 4:
            {
                cout<<"\nLista se va sorta";
                L->InsertionSort();
                break;
            }
        case 5:
            {
                cout<<"\nLista va fi afisata in ordine normala: ";
                L->Print();
                cout<<"\n";
                break;
            }
        case 6:
            {
                cout<<"\nLista va fi afisata in ordine inversa: ";
                L->ReversePrint();
                cout<<"\n";
                break;
            }
        }
    }while(option==1 || option==2 || option==3 || option==4 || option==5 || option==6);
    cout<<"\nOptiune invalida\n";
    return 0;
}
